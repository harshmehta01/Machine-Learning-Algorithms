# -*- coding: utf-8 -*-
"""Multiple Linear Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iFKN-oyADiDwxxafP2Es0M-gBcCrWUlX
"""

#Importing the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Importing the dataset
data=pd.read_csv('/content/50_Startups.csv')
data.head()

data.describe()

print('There are ',data.shape[0],'rows and ',data.shape[1],'columns in the dataset.')

data.info()

outliers = ['Profit']
plt.rcParams['figure.figsize'] = [8,8]
sns.boxplot(data=data[outliers], orient="v", palette="Set2" , width=0.7) 
plt.title("Outliers Variable Distribution")
plt.ylabel("Profit Range")
plt.xlabel("Continuous Variable")
plt.show()

sns.boxplot(x='State',y='Profit',data=data)
plt.show()

sns.distplot(data['Profit'],bins=5,kde=True)
plt.show()

sns.pairplot(data)
plt.show()

"""#**Model Development**"""

x=data.iloc[:,:-1]
y=data.iloc[:,4]

states-pd.get_dummies(x['State'],drop_first=True)
x=x.drop('State',axis=1)
x=pd.concat([x,states],axis=1)

#Splitting the dataset into Training set and Test set
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

#Fitting Multiple Linear Regression in the Training set
from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(x_train,y_train)

#Predicting the Test set results
y_pred=model.predict(x_test)
y_pred

testing_data_model_score=model.score(x_test, y_test)
print("Model performance on Testing data",testing_data_model_score)

training_data_model_score=model.score(x_train, y_train)
print("Model performance on Training data",training_data_model_score)

"""#**Model Evaluation**"""

from sklearn.metrics import r2_score
r2Score = r2_score(y_pred, y_test)
print("R2 score of model is:" ,r2Score*100)

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_pred, y_test)
print("Mean Squarred Error is:" ,mse*100)

rmse = np.sqrt(mean_squared_error(y_pred, y_test))
print("Root Mean Squarred Error is: ",rmse*100)

from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_pred,y_test)
print("Mean Absolute Error is:" ,mae)