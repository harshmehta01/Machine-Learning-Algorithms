# -*- coding: utf-8 -*-
"""Decision Tree

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jx5L0k1wKHqqWJRPZdlX5EVuHQdIJLv8
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.tree import plot_tree

#Importing Dataset
df=sns.load_dataset('iris')
df.head(10)

"""#**Exploratory Data Analysis**"""

#Getting information of dataset
df.info()
df.shape
df.isnull().any()

#Let's plot pairplot to visualize the attribute all at once
sns.pairplot(data=df,hue='species')

#Coreelation matrix
sns.heatmap(df.corr())

#Define target attribute
target=df['species']
df1=df.copy()
df1=df1.drop('species',axis=1)

#Defining the attributes
x=df1
x
target

#Label Encoding
le=LabelEncoder()
target=le.fit_transform(target)
target
y=target

#Splitting the data-80:20 ratio
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
print("Training split input: ",x_train.shape)
print("Training split input: ",x_test.shape)

#Defining the decision tree algorithm
dtree=DecisionTreeClassifier()
dtree.fit(x_train,y_train)
print("Decision Tree Classifier Created")

#Predicting the values of test data
y_pred=dtree.predict(x_test)
print("Classification report: ",classification_report(y_test,y_pred))

#Visualising the graph without the use of graphviz
plt.figure(figsize=(20,20))
dec_tree=plot_tree(decision_tree=dtree,feature_names=df1.columns,class_names=["setosa","vericolor","verginica"],filled=True,precision=4,
                   rounded=True)